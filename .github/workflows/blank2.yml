name: iOS Build (Switch2Launcher + Dolphin iOS)

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: macos-latest

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Install required tools
      - name: Install dependencies
        run: |
          brew install cmake ninja unzip curl zip pkg-config sdl2 ffmpeg

      # 3. Download the Switch2Launcher ZIP
      - name: Download Switch2Launcher ZIP
        run: |
          echo "Downloading Switch2Launcher_Xcode_DolphinFull.zip..."
          curl -L -o Switch2Launcher_Xcode_DolphinFull.zip \
          https://github.com/besthathacker/switch-2-launcher-iOS/releases/download/v1.0.0/Switch2Launcher_Xcode_DolphinFull.zip

      # 4. Unzip the project
      - name: Unzip Switch2Launcher Project
        run: |
          unzip Switch2Launcher_Xcode_DolphinFull.zip -d Switch2LauncherProject
          ls -R Switch2LauncherProject

      # 5. Clone Dolphin iOS and submodules
      - name: Clone Dolphin iOS
        run: |
          git clone https://github.com/OatmealDome/dolphin-ios.git
          cd dolphin-ios
          git submodule update --init --recursive
          echo "=== Dolphin iOS repo structure ==="
          find . -maxdepth 2

      # 6. Patch Dolphin source for iOS compatibility
      - name: Patch Dolphin Source
        run: |
          cd dolphin-ios
          echo "Patching AvailabilityMacros.h includes..."
          grep -rl "AvailabilityMacros.h" . | xargs sed -i '' 's/AvailabilityMacros.h/Availability.h/g' || true
          echo "Replacing off64_t with off_t..."
          grep -rl "off64_t" . | xargs sed -i '' 's/off64_t/off_t/g' || true
          echo "Commenting out #error directives..."
          grep -rl "^[[:space:]]*#error" . | xargs sed -i '' 's/^/#warning DISABLED: /' || true

      # 7. Configure and build DolphinCore.framework (first attempt)
      - name: Build DolphinCore.framework
        run: |
          cd dolphin-ios
          git submodule update --init --recursive
          if [ ! -f Externals/ios-cmake/ios.toolchain.cmake ]; then
            echo "ios-cmake toolchain missing! Cloning manually..."
            git clone https://github.com/leetal/ios-cmake.git Externals/ios-cmake
          fi
          mkdir -p build_ios && cd build_ios
          cmake .. \
            -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE=../Externals/ios-cmake/ios.toolchain.cmake \
            -DPLATFORM=OS64 \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
            -DCMAKE_OSX_ARCHITECTURES=arm64 \
            -DCMAKE_C_STANDARD=11 \
            -DCMAKE_CXX_STANDARD=17 \
            -DCMAKE_C_FLAGS="-std=c11 -D_DARWIN_C_SOURCE=1 -D_FILE_OFFSET_BITS=64" \
            -DCMAKE_CXX_FLAGS="-std=c++17 -D_DARWIN_C_SOURCE=1 -D_FILE_OFFSET_BITS=64 -Wno-error" \
            -DENABLE_VISIBILITY=ON \
            -DENABLE_BITCODE=OFF \
            -DENABLE_ARC=ON \
            -DENABLE_X11=OFF \
            -DENABLE_ANALYTICS=NO \
            -DUSE_SYSTEM_LIBS=OFF \
            -DENABLE_TESTS=OFF

          echo "=== Available Ninja Targets ==="
          ninja -t targets all | tee ninja_targets.txt

          TARGET=$(grep -E 'Dolphin.*framework|Core.*framework' ninja_targets.txt | head -n 1 | awk '{print $1}')

          set +e
          if [ -z "$TARGET" ]; then
            echo "No specific DolphinCore target found. Building all targets..."
            ninja -v | tee build_output.log
          else
            echo "Building target: $TARGET"
            ninja -v "$TARGET" | tee build_output.log
          fi
          BUILD_EXIT=$?
          set -e

          if [ $BUILD_EXIT -ne 0 ]; then
            echo "⚠️ Initial build failed. Retrying with 'ninja -k 0' to gather more logs."
            ninja -k 0 -v | tee build_output.log
          fi

          FRAMEWORK_PATH=$(find . -name "DolphinCore.framework" | head -n 1)
          if [ -z "$FRAMEWORK_PATH" ]; then
            echo "❌ DolphinCore.framework not found! Build failed."
            exit 1
          fi

          echo "✅ Found DolphinCore.framework at: $FRAMEWORK_PATH"
          cp -R "$FRAMEWORK_PATH" ../../Switch2LauncherProject/Switch2Launcher/Frameworks/

      # 8. Early fatal error detection
      - name: Check for Fatal Errors
        run: |
          if grep -i "fatal error:" dolphin-ios/build_ios/build_output.log; then
            echo "❌ Fatal errors detected in build log. Stopping workflow."
            exit 1
          fi

      # 9. Repack updated project ZIP
      - name: Repack Project with DolphinCore
        run: |
          cd Switch2LauncherProject
          zip -r ../Switch2Launcher_Xcode_DolphinFull_v1.0.1.zip .
          cd ..

      # 10. Setup signing
      - name: Setup Signing
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$P12_CERT" | base64 --decode > cert.p12
          echo "$PROVISIONING_PROFILE" | base64 --decode > profile.mobileprovision
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          security create-keychain -p github-actions ios-build.keychain
          security default-keychain -s ios-build.keychain
          security unlock-keychain -p github-actions ios-build.keychain
          security import cert.p12 -k ios-build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -k github-actions ios-build.keychain

      # 11. Build and archive IPA
      - name: Build Archive
        run: |
          cd Switch2LauncherProject/Switch2Launcher_Xcode_DolphinFull
          xcodebuild archive \
            -scheme Switch2Launcher \
            -archivePath build/Switch2Launcher.xcarchive \
            -sdk iphoneos \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Development" \
            PROVISIONING_PROFILE_SPECIFIER="AdHoc"

      # 12. Export IPA
      - name: Export IPA
        run: |
          cd Switch2LauncherProject/Switch2Launcher_Xcode_DolphinFull
          xcodebuild -exportArchive \
            -archivePath build/Switch2Launcher.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath build/ipa

      # 13. Upload IPA and updated ZIP to Release
      - name: Upload IPA and ZIP to v1.0.1 Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v1.0.1
          name: "Switch2Launcher + Dolphin iOS Build v1.0.1"
          draft: false
          prerelease: false
          files: |
            Switch2LauncherProject/Switch2Launcher_Xcode_DolphinFull/build/ipa/Switch2Launcher.ipa
            Switch2Launcher_Xcode_DolphinFull_v1.0.1.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 14. Upload Dolphin build logs if failure
      - name: Upload Dolphin Build Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: dolphin-build-logs
          path: dolphin-ios/build_ios
